/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_engine_2 (
    input clk,
    input rst,
    input [4:0] btn,
    output reg [6:0] target_out,
    output reg [6:0] current_out,
    output reg [2:0] btn_a,
    output reg [2:0] btn_b,
    output reg [2:0] btn_c,
    output reg [2:0] btn_d
  );
  
  
  
  reg [2:0] tmp;
  
  wire [32-1:0] M_random_num;
  reg [1-1:0] M_random_next;
  reg [32-1:0] M_random_seed;
  random_3 random (
    .clk(clk),
    .rst(rst),
    .next(M_random_next),
    .seed(M_random_seed),
    .num(M_random_num)
  );
  localparam BEGIN_state = 2'd0;
  localparam CURRENT_state = 2'd1;
  localparam INCREASE_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = BEGIN_state;
  reg [6:0] M_target_value_d, M_target_value_q = 1'h0;
  reg [6:0] M_current_value_d, M_current_value_q = 1'h0;
  reg [2:0] M_button_a_d, M_button_a_q = 1'h0;
  reg [2:0] M_button_b_d, M_button_b_q = 1'h0;
  reg [2:0] M_button_c_d, M_button_c_q = 1'h0;
  reg [2:0] M_button_d_d, M_button_d_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_button_b_d = M_button_b_q;
    M_button_a_d = M_button_a_q;
    M_button_d_d = M_button_d_q;
    M_button_c_d = M_button_c_q;
    M_target_value_d = M_target_value_q;
    M_current_value_d = M_current_value_q;
    
    target_out = 1'h0;
    current_out = 1'h0;
    btn_a = 1'h0;
    btn_b = 1'h0;
    btn_c = 1'h0;
    btn_d = 1'h0;
    tmp = 1'h0;
    M_random_next = btn[0+0-:1] | btn[1+0-:1] | btn[2+0-:1] | btn[3+0-:1] | btn[4+0-:1];
    M_random_seed = 128'h843233523a611966423b622562592c62 + M_button_a_q;
    
    case (M_state_q)
      BEGIN_state: begin
        M_target_value_d[0+6-:7] = M_random_num[0+6-:7];
        M_button_a_d = 3'h1;
        M_button_b_d = 3'h3;
        M_button_c_d = 3'h5;
        M_button_d_d = 3'h7;
        target_out = M_target_value_q;
        current_out = M_current_value_q;
        btn_a = M_button_a_q;
        btn_b = M_button_b_q;
        btn_c = M_button_c_q;
        btn_d = M_button_d_q;
        M_state_d = CURRENT_state;
      end
      CURRENT_state: begin
        M_button_a_d = 3'h1;
        M_button_b_d = 3'h3;
        M_button_c_d = 3'h5;
        M_button_d_d = 3'h7;
        current_out = M_current_value_q;
        tmp = M_current_value_q;
        target_out = M_target_value_q;
        btn_a = M_button_a_q;
        btn_b = M_button_b_q;
        btn_c = M_button_c_q;
        btn_d = M_button_d_q;
        if (btn[0+0-:1]) begin
          tmp = M_button_a_q;
          M_current_value_d = tmp;
        end else begin
          if (btn[1+0-:1]) begin
            tmp = M_button_b_q;
            M_current_value_d = tmp;
          end else begin
            if (btn[2+0-:1]) begin
              tmp = M_button_c_q;
              M_current_value_d = tmp;
            end else begin
              if (btn[3+0-:1]) begin
                tmp = M_button_d_q;
                M_current_value_d = tmp;
              end
            end
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_target_value_q <= 1'h0;
      M_current_value_q <= 1'h0;
      M_button_a_q <= 1'h0;
      M_button_b_q <= 1'h0;
      M_button_c_q <= 1'h0;
      M_button_d_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_target_value_q <= M_target_value_d;
      M_current_value_q <= M_current_value_d;
      M_button_a_q <= M_button_a_d;
      M_button_b_q <= M_button_b_d;
      M_button_c_q <= M_button_c_d;
      M_button_d_q <= M_button_d_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
