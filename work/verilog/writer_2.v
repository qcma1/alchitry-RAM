/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module writer_2 (
    input clk,
    input rst,
    output reg [6:0] out
  );
  
  
  
  wire [7-1:0] M_ram_out_number;
  reg [1-1:0] M_ram_location;
  reg [1-1:0] M_ram_state;
  reg [7-1:0] M_ram_in_number;
  ram_handler_3 ram (
    .clk(clk),
    .location(M_ram_location),
    .state(M_ram_state),
    .in_number(M_ram_in_number),
    .out_number(M_ram_out_number)
  );
  localparam START_state = 1'd0;
  localparam END_state = 1'd1;
  
  reg M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    out = 1'h0;
    M_ram_location = 1'h0;
    M_ram_in_number = 1'h0;
    M_ram_state = 1'h0;
    
    case (M_state_q)
      START_state: begin
        M_ram_state = 1'h1;
        M_ram_in_number = 3'h3;
        M_ram_location = 1'h1;
        M_state_d = END_state;
      end
      END_state: begin
        M_ram_state = 1'h0;
        M_ram_location = 1'h1;
        out[0+6-:7] = M_ram_out_number;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
